generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String
  username          String?  @unique
  bio               String?
  avatar            String?
  walletAddress     String?  @unique
  isVerified        Boolean  @default(false)
  isPremium         Boolean  @default(false)
  premiumExpiresAt  DateTime?
  reputation        Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  ideas             Idea[]
  comments          Comment[]
  votes             Vote[]
  follows           Follow[] @relation("UserFollows")
  followers         Follow[] @relation("UserFollowers")
  notifications     Notification[]
  subscriptions     Subscription[]
  reports           Report[]
  bookmarks         Bookmark[]
  sessions          Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Idea {
  id          String      @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  isPremium   Boolean     @default(false)
  isPublished Boolean     @default(true)
  viewCount   Int         @default(0)
  authorId    String
  categoryId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])
  tags        IdeaTag[]
  comments    Comment[]
  votes       Vote[]
  bookmarks   Bookmark[]
  reports     Report[]

  @@map("ideas")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ideas       Idea[]

  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String?
  useCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  ideas     IdeaTag[]

  @@map("tags")
}

model IdeaTag {
  ideaId String
  tagId  String

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([ideaId, tagId])
  @@map("idea_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  ideaId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  idea     Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  reports  Report[]

  @@map("comments")
}

model Vote {
  id       String    @id @default(cuid())
  type     VoteType
  userId   String
  ideaId   String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@unique([userId, ideaId])
  @@map("votes")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  ideaId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@unique([userId, ideaId])
  @@map("bookmarks")
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String
  type      SubscriptionType
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime
  amount    Float
  currency  String           @default("USD")
  stripeSubscriptionId String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Report {
  id        String     @id @default(cuid())
  type      ReportType
  reason    String
  details   String?
  status    ReportStatus @default(PENDING)
  reporterId String
  ideaId    String?
  commentId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  reporter User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  idea     Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model MarketData {
  id          String   @id @default(cuid())
  symbol      String   @unique
  name        String
  price       Float
  change24h   Float
  volume24h   Float
  marketCap   Float
  lastUpdated DateTime @default(now())

  @@map("market_data")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isVirtual   Boolean   @default(false)
  maxAttendees Int?
  registrationUrl String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum SubscriptionType {
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum NotificationType {
  IDEA_COMMENT
  IDEA_VOTE
  FOLLOW
  MENTION
  SYSTEM
  PREMIUM_EXPIRY
}

enum ReportType {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}